// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class TokenDeployment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDeployment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDeployment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenDeployment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenDeployment | null {
    return changetype<TokenDeployment | null>(
      store.get_in_block("TokenDeployment", id),
    );
  }

  static load(id: string): TokenDeployment | null {
    return changetype<TokenDeployment | null>(store.get("TokenDeployment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get deployedAt(): BigInt {
    let value = this.get("deployedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deployedAt(value: BigInt) {
    this.set("deployedAt", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get bondingProgress(): BigDecimal {
    let value = this.get("bondingProgress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bondingProgress(value: BigDecimal) {
    this.set("bondingProgress", Value.fromBigDecimal(value));
  }

  get migrationStatus(): string {
    let value = this.get("migrationStatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set migrationStatus(value: string) {
    this.set("migrationStatus", Value.fromString(value));
  }

  get currentPriceAvax(): BigDecimal {
    let value = this.get("currentPriceAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set currentPriceAvax(value: BigDecimal) {
    this.set("currentPriceAvax", Value.fromBigDecimal(value));
  }

  get avaxRaised(): BigDecimal {
    let value = this.get("avaxRaised");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set avaxRaised(value: BigDecimal) {
    this.set("avaxRaised", Value.fromBigDecimal(value));
  }

  get totalAvaxVolume(): BigDecimal {
    let value = this.get("totalAvaxVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalAvaxVolume(value: BigDecimal) {
    this.set("totalAvaxVolume", Value.fromBigDecimal(value));
  }

  get totalBuyVolume(): BigDecimal {
    let value = this.get("totalBuyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBuyVolume(value: BigDecimal) {
    this.set("totalBuyVolume", Value.fromBigDecimal(value));
  }

  get totalSellVolume(): BigDecimal {
    let value = this.get("totalSellVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSellVolume(value: BigDecimal) {
    this.set("totalSellVolume", Value.fromBigDecimal(value));
  }

  get totalTrades(): i32 {
    let value = this.get("totalTrades");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTrades(value: i32) {
    this.set("totalTrades", Value.fromI32(value));
  }

  get totalBuys(): i32 {
    let value = this.get("totalBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalBuys(value: i32) {
    this.set("totalBuys", Value.fromI32(value));
  }

  get totalSells(): i32 {
    let value = this.get("totalSells");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSells(value: i32) {
    this.set("totalSells", Value.fromI32(value));
  }

  get uniqueTraders(): i32 {
    let value = this.get("uniqueTraders");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueTraders(value: i32) {
    this.set("uniqueTraders", Value.fromI32(value));
  }

  get marketCapAvax(): BigDecimal {
    let value = this.get("marketCapAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set marketCapAvax(value: BigDecimal) {
    this.set("marketCapAvax", Value.fromBigDecimal(value));
  }

  get liquidityAvax(): BigDecimal {
    let value = this.get("liquidityAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityAvax(value: BigDecimal) {
    this.set("liquidityAvax", Value.fromBigDecimal(value));
  }

  get holders(): i32 {
    let value = this.get("holders");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set holders(value: i32) {
    this.set("holders", Value.fromI32(value));
  }

  get priceHigh24h(): BigDecimal {
    let value = this.get("priceHigh24h");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceHigh24h(value: BigDecimal) {
    this.set("priceHigh24h", Value.fromBigDecimal(value));
  }

  get priceLow24h(): BigDecimal {
    let value = this.get("priceLow24h");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceLow24h(value: BigDecimal) {
    this.set("priceLow24h", Value.fromBigDecimal(value));
  }

  get volume24h(): BigDecimal {
    let value = this.get("volume24h");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume24h(value: BigDecimal) {
    this.set("volume24h", Value.fromBigDecimal(value));
  }

  get priceChange24h(): BigDecimal {
    let value = this.get("priceChange24h");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceChange24h(value: BigDecimal) {
    this.set("priceChange24h", Value.fromBigDecimal(value));
  }

  get migrationThreshold(): BigDecimal {
    let value = this.get("migrationThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set migrationThreshold(value: BigDecimal) {
    this.set("migrationThreshold", Value.fromBigDecimal(value));
  }

  get pairAddress(): Bytes | null {
    let value = this.get("pairAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pairAddress(value: Bytes | null) {
    if (!value) {
      this.unset("pairAddress");
    } else {
      this.set("pairAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get lastTradeTimestamp(): BigInt {
    let value = this.get("lastTradeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastTradeTimestamp(value: BigInt) {
    this.set("lastTradeTimestamp", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }

  get bondingEvents(): BondingEventLoader {
    return new BondingEventLoader(
      "TokenDeployment",
      this.get("id")!.toString(),
      "bondingEvents",
    );
  }

  get priceSnapshots(): PriceSnapshotLoader {
    return new PriceSnapshotLoader(
      "TokenDeployment",
      this.get("id")!.toString(),
      "priceSnapshots",
    );
  }
}

export class BondingEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondingEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondingEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BondingEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondingEvent | null {
    return changetype<BondingEvent | null>(
      store.get_in_block("BondingEvent", id),
    );
  }

  static load(id: string): BondingEvent | null {
    return changetype<BondingEvent | null>(store.get("BondingEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get avaxAmount(): BigDecimal {
    let value = this.get("avaxAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set avaxAmount(value: BigDecimal) {
    this.set("avaxAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get priceAvax(): BigDecimal {
    let value = this.get("priceAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceAvax(value: BigDecimal) {
    this.set("priceAvax", Value.fromBigDecimal(value));
  }

  get bondingProgress(): BigDecimal {
    let value = this.get("bondingProgress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bondingProgress(value: BigDecimal) {
    this.set("bondingProgress", Value.fromBigDecimal(value));
  }

  get cumulativeAvax(): BigDecimal {
    let value = this.get("cumulativeAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeAvax(value: BigDecimal) {
    this.set("cumulativeAvax", Value.fromBigDecimal(value));
  }

  get tradeType(): string {
    let value = this.get("tradeType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tradeType(value: string) {
    this.set("tradeType", Value.fromString(value));
  }

  get protocolFee(): BigDecimal {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolFee(value: BigDecimal) {
    this.set("protocolFee", Value.fromBigDecimal(value));
  }

  get creatorFee(): BigDecimal {
    let value = this.get("creatorFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set creatorFee(value: BigDecimal) {
    this.set("creatorFee", Value.fromBigDecimal(value));
  }

  get referralFee(): BigDecimal {
    let value = this.get("referralFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set referralFee(value: BigDecimal) {
    this.set("referralFee", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }
}

export class PriceSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceSnapshot | null {
    return changetype<PriceSnapshot | null>(
      store.get_in_block("PriceSnapshot", id),
    );
  }

  static load(id: string): PriceSnapshot | null {
    return changetype<PriceSnapshot | null>(store.get("PriceSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get priceAvax(): BigDecimal {
    let value = this.get("priceAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceAvax(value: BigDecimal) {
    this.set("priceAvax", Value.fromBigDecimal(value));
  }

  get volumeAvax(): BigDecimal {
    let value = this.get("volumeAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volumeAvax(value: BigDecimal) {
    this.set("volumeAvax", Value.fromBigDecimal(value));
  }

  get trades(): i32 {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set trades(value: i32) {
    this.set("trades", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class UserActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserActivity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserActivity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserActivity | null {
    return changetype<UserActivity | null>(
      store.get_in_block("UserActivity", id),
    );
  }

  static load(id: string): UserActivity | null {
    return changetype<UserActivity | null>(store.get("UserActivity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get totalTrades(): i32 {
    let value = this.get("totalTrades");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTrades(value: i32) {
    this.set("totalTrades", Value.fromI32(value));
  }

  get totalVolumeAvax(): BigDecimal {
    let value = this.get("totalVolumeAvax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolumeAvax(value: BigDecimal) {
    this.set("totalVolumeAvax", Value.fromBigDecimal(value));
  }

  get totalTokensBought(): BigDecimal {
    let value = this.get("totalTokensBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTokensBought(value: BigDecimal) {
    this.set("totalTokensBought", Value.fromBigDecimal(value));
  }

  get totalTokensSold(): BigDecimal {
    let value = this.get("totalTokensSold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTokensSold(value: BigDecimal) {
    this.set("totalTokensSold", Value.fromBigDecimal(value));
  }

  get totalFeesSpent(): BigDecimal {
    let value = this.get("totalFeesSpent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFeesSpent(value: BigDecimal) {
    this.set("totalFeesSpent", Value.fromBigDecimal(value));
  }

  get uniqueTokensTraded(): i32 {
    let value = this.get("uniqueTokensTraded");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueTokensTraded(value: i32) {
    this.set("uniqueTokensTraded", Value.fromI32(value));
  }

  get firstTradeTimestamp(): BigInt {
    let value = this.get("firstTradeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstTradeTimestamp(value: BigInt) {
    this.set("firstTradeTimestamp", Value.fromBigInt(value));
  }

  get lastTradeTimestamp(): BigInt {
    let value = this.get("lastTradeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastTradeTimestamp(value: BigInt) {
    this.set("lastTradeTimestamp", Value.fromBigInt(value));
  }
}

export class DailyStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DailyStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get_in_block("DailyStats", id));
  }

  static load(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get("DailyStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get totalTokens(): i32 {
    let value = this.get("totalTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTokens(value: i32) {
    this.set("totalTokens", Value.fromI32(value));
  }

  get newTokens(): i32 {
    let value = this.get("newTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newTokens(value: i32) {
    this.set("newTokens", Value.fromI32(value));
  }

  get migratedTokens(): i32 {
    let value = this.get("migratedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set migratedTokens(value: i32) {
    this.set("migratedTokens", Value.fromI32(value));
  }

  get totalVolume(): BigDecimal {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolume(value: BigDecimal) {
    this.set("totalVolume", Value.fromBigDecimal(value));
  }

  get totalTrades(): i32 {
    let value = this.get("totalTrades");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTrades(value: i32) {
    this.set("totalTrades", Value.fromI32(value));
  }

  get uniqueTraders(): i32 {
    let value = this.get("uniqueTraders");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueTraders(value: i32) {
    this.set("uniqueTraders", Value.fromI32(value));
  }

  get totalProtocolFees(): BigDecimal {
    let value = this.get("totalProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalProtocolFees(value: BigDecimal) {
    this.set("totalProtocolFees", Value.fromBigDecimal(value));
  }

  get totalCreatorFees(): BigDecimal {
    let value = this.get("totalCreatorFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalCreatorFees(value: BigDecimal) {
    this.set("totalCreatorFees", Value.fromBigDecimal(value));
  }

  get totalReferralFees(): BigDecimal {
    let value = this.get("totalReferralFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalReferralFees(value: BigDecimal) {
    this.set("totalReferralFees", Value.fromBigDecimal(value));
  }

  get averageTokenPrice(): BigDecimal {
    let value = this.get("averageTokenPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageTokenPrice(value: BigDecimal) {
    this.set("averageTokenPrice", Value.fromBigDecimal(value));
  }

  get totalMarketCap(): BigDecimal {
    let value = this.get("totalMarketCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalMarketCap(value: BigDecimal) {
    this.set("totalMarketCap", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id),
    );
  }

  static load(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(store.get("GlobalStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTokensCreated(): i32 {
    let value = this.get("totalTokensCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTokensCreated(value: i32) {
    this.set("totalTokensCreated", Value.fromI32(value));
  }

  get totalVolumeAllTime(): BigDecimal {
    let value = this.get("totalVolumeAllTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolumeAllTime(value: BigDecimal) {
    this.set("totalVolumeAllTime", Value.fromBigDecimal(value));
  }

  get totalTradesAllTime(): i32 {
    let value = this.get("totalTradesAllTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTradesAllTime(value: i32) {
    this.set("totalTradesAllTime", Value.fromI32(value));
  }

  get totalUsersAllTime(): i32 {
    let value = this.get("totalUsersAllTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalUsersAllTime(value: i32) {
    this.set("totalUsersAllTime", Value.fromI32(value));
  }

  get activeTokens(): i32 {
    let value = this.get("activeTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set activeTokens(value: i32) {
    this.set("activeTokens", Value.fromI32(value));
  }

  get migratedTokens(): i32 {
    let value = this.get("migratedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set migratedTokens(value: i32) {
    this.set("migratedTokens", Value.fromI32(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }
}

export class BondingEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BondingEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BondingEvent[]>(value);
  }
}

export class PriceSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PriceSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PriceSnapshot[]>(value);
  }
}
