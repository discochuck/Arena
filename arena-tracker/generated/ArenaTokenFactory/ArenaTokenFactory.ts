// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllowedTokenSupplyForParamsSet extends ethereum.Event {
  get params(): AllowedTokenSupplyForParamsSet__Params {
    return new AllowedTokenSupplyForParamsSet__Params(this);
  }
}

export class AllowedTokenSupplyForParamsSet__Params {
  _event: AllowedTokenSupplyForParamsSet;

  constructor(event: AllowedTokenSupplyForParamsSet) {
    this._event = event;
  }

  get a(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get b(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get curveScaler(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenSupply(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenSplit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cost(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get referrerAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get referralFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get creatorFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LPDeployPermissionSet extends ethereum.Event {
  get params(): LPDeployPermissionSet__Params {
    return new LPDeployPermissionSet__Params(this);
  }
}

export class LPDeployPermissionSet__Params {
  _event: LPDeployPermissionSet;

  constructor(event: LPDeployPermissionSet) {
    this._event = event;
  }

  get value(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProtocolFeeBasisPointSet extends ethereum.Event {
  get params(): ProtocolFeeBasisPointSet__Params {
    return new ProtocolFeeBasisPointSet__Params(this);
  }
}

export class ProtocolFeeBasisPointSet__Params {
  _event: ProtocolFeeBasisPointSet;

  constructor(event: ProtocolFeeBasisPointSet) {
    this._event = event;
  }

  get oldBasisPoint(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBasisPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolFeeDestinationSet extends ethereum.Event {
  get params(): ProtocolFeeDestinationSet__Params {
    return new ProtocolFeeDestinationSet__Params(this);
  }
}

export class ProtocolFeeDestinationSet__Params {
  _event: ProtocolFeeDestinationSet;

  constructor(event: ProtocolFeeDestinationSet) {
    this._event = event;
  }

  get oldDestination(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDestination(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReferralFeeBasisPointSet extends ethereum.Event {
  get params(): ReferralFeeBasisPointSet__Params {
    return new ReferralFeeBasisPointSet__Params(this);
  }
}

export class ReferralFeeBasisPointSet__Params {
  _event: ReferralFeeBasisPointSet;

  constructor(event: ReferralFeeBasisPointSet) {
    this._event = event;
  }

  get oldBasisPoint(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBasisPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReferrerSet extends ethereum.Event {
  get params(): ReferrerSet__Params {
    return new ReferrerSet__Params(this);
  }
}

export class ReferrerSet__Params {
  _event: ReferrerSet;

  constructor(event: ReferrerSet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referrer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get referrerAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get referralFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get creatorFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get params(): TokenCreatedParamsStruct {
    return changetype<TokenCreatedParamsStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }

  get tokenSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenCreatedParamsStruct extends ethereum.Tuple {
  get curveScaler(): BigInt {
    return this[0].toBigInt();
  }

  get a(): i32 {
    return this[1].toI32();
  }

  get b(): i32 {
    return this[2].toI32();
  }

  get lpDeployed(): boolean {
    return this[3].toBoolean();
  }

  get lpPercentage(): i32 {
    return this[4].toI32();
  }

  get salePercentage(): i32 {
    return this[5].toI32();
  }

  get creatorFeeBasisPoints(): i32 {
    return this[6].toI32();
  }

  get creatorAddress(): Address {
    return this[7].toAddress();
  }

  get pairAddress(): Address {
    return this[8].toAddress();
  }

  get tokenContractAddress(): Address {
    return this[9].toAddress();
  }
}

export class TokenFactorySet extends ethereum.Event {
  get params(): TokenFactorySet__Params {
    return new TokenFactorySet__Params(this);
  }
}

export class TokenFactorySet__Params {
  _event: TokenFactorySet;

  constructor(event: TokenFactorySet) {
    this._event = event;
  }

  get oldTokenFactoryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTokenFactory(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenLPCreated extends ethereum.Event {
  get params(): TokenLPCreated__Params {
    return new TokenLPCreated__Params(this);
  }
}

export class TokenLPCreated__Params {
  _event: TokenLPCreated;

  constructor(event: TokenLPCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountAVAX(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArenaTokenFactory__calculateRewardAndSupplyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class ArenaTokenFactory__getFeeDataResultFeeDataStruct extends ethereum.Tuple {
  get protocolFee(): BigInt {
    return this[0].toBigInt();
  }

  get creatorFee(): BigInt {
    return this[1].toBigInt();
  }

  get referralFee(): BigInt {
    return this[2].toBigInt();
  }

  get totalFeeAmount(): BigInt {
    return this[3].toBigInt();
  }

  get tokenCreator(): Address {
    return this[4].toAddress();
  }

  get referrerAddress(): Address {
    return this[5].toAddress();
  }
}

export class ArenaTokenFactory__getTokenParametersResultParamsStruct extends ethereum.Tuple {
  get curveScaler(): BigInt {
    return this[0].toBigInt();
  }

  get a(): i32 {
    return this[1].toI32();
  }

  get b(): i32 {
    return this[2].toI32();
  }

  get lpDeployed(): boolean {
    return this[3].toBoolean();
  }

  get lpPercentage(): i32 {
    return this[4].toI32();
  }

  get salePercentage(): i32 {
    return this[5].toI32();
  }

  get creatorFeeBasisPoints(): i32 {
    return this[6].toI32();
  }

  get creatorAddress(): Address {
    return this[7].toAddress();
  }

  get pairAddress(): Address {
    return this[8].toAddress();
  }

  get tokenContractAddress(): Address {
    return this[9].toAddress();
  }
}

export class ArenaTokenFactory__tokenParamsResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: boolean;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: Address;
  value8: Address;
  value9: Address;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: boolean,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: Address,
    value8: Address,
    value9: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4)),
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5)),
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    return map;
  }

  getCurveScaler(): BigInt {
    return this.value0;
  }

  getA(): i32 {
    return this.value1;
  }

  getB(): i32 {
    return this.value2;
  }

  getLpDeployed(): boolean {
    return this.value3;
  }

  getLpPercentage(): i32 {
    return this.value4;
  }

  getSalePercentage(): i32 {
    return this.value5;
  }

  getCreatorFeeBasisPoints(): i32 {
    return this.value6;
  }

  getCreatorAddress(): Address {
    return this.value7;
  }

  getPairAddress(): Address {
    return this.value8;
  }

  getTokenContractAddress(): Address {
    return this.value9;
  }
}

export class ArenaTokenFactory extends ethereum.SmartContract {
  static bind(address: Address): ArenaTokenFactory {
    return new ArenaTokenFactory("ArenaTokenFactory", address);
  }

  GRANULARITY_SCALER(): BigInt {
    let result = super.call(
      "GRANULARITY_SCALER",
      "GRANULARITY_SCALER():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_GRANULARITY_SCALER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GRANULARITY_SCALER",
      "GRANULARITY_SCALER():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  INITIAL_TOKEN_ID(): BigInt {
    let result = super.call(
      "INITIAL_TOKEN_ID",
      "INITIAL_TOKEN_ID():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_INITIAL_TOKEN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INITIAL_TOKEN_ID",
      "INITIAL_TOKEN_ID():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_CREATOR_FEE_BASIS_POINT(): BigInt {
    let result = super.call(
      "MAX_CREATOR_FEE_BASIS_POINT",
      "MAX_CREATOR_FEE_BASIS_POINT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_CREATOR_FEE_BASIS_POINT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_CREATOR_FEE_BASIS_POINT",
      "MAX_CREATOR_FEE_BASIS_POINT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FEE_BASIS_POINT(): i32 {
    let result = super.call(
      "MAX_FEE_BASIS_POINT",
      "MAX_FEE_BASIS_POINT():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_MAX_FEE_BASIS_POINT(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_FEE_BASIS_POINT",
      "MAX_FEE_BASIS_POINT():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  STAKER_REWARD_TOKEN_VAULT(): Address {
    let result = super.call(
      "STAKER_REWARD_TOKEN_VAULT",
      "STAKER_REWARD_TOKEN_VAULT():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_STAKER_REWARD_TOKEN_VAULT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "STAKER_REWARD_TOKEN_VAULT",
      "STAKER_REWARD_TOKEN_VAULT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  WAVAX_ADDRESS(): Address {
    let result = super.call("WAVAX_ADDRESS", "WAVAX_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_WAVAX_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "WAVAX_ADDRESS",
      "WAVAX_ADDRESS():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowedTokenSupplyWithParameters(param0: Bytes): BigInt {
    let result = super.call(
      "allowedTokenSupplyWithParameters",
      "allowedTokenSupplyWithParameters(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_allowedTokenSupplyWithParameters(
    param0: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowedTokenSupplyWithParameters",
      "allowedTokenSupplyWithParameters(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedTotalSupplyWithParameters(
    a: i32,
    b: i32,
    c: BigInt,
    tokenSplit: BigInt,
  ): BigInt {
    let result = super.call(
      "allowedTotalSupplyWithParameters",
      "allowedTotalSupplyWithParameters(uint16,uint8,uint128,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(a)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(b)),
        ethereum.Value.fromUnsignedBigInt(c),
        ethereum.Value.fromUnsignedBigInt(tokenSplit),
      ],
    );

    return result[0].toBigInt();
  }

  try_allowedTotalSupplyWithParameters(
    a: i32,
    b: i32,
    c: BigInt,
    tokenSplit: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowedTotalSupplyWithParameters",
      "allowedTotalSupplyWithParameters(uint16,uint8,uint128,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(a)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(b)),
        ethereum.Value.fromUnsignedBigInt(c),
        ethereum.Value.fromUnsignedBigInt(tokenSplit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCost(amountInToken: BigInt, _tokenId: BigInt): BigInt {
    let result = super.call(
      "calculateCost",
      "calculateCost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInToken),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCost(
    amountInToken: BigInt,
    _tokenId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCost",
      "calculateCost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInToken),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCostScaledParametric(
    amountInWei: BigInt,
    supplyInWei: BigInt,
    a: BigInt,
    b: BigInt,
    curveScaler: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateCostScaledParametric",
      "calculateCostScaledParametric(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInWei),
        ethereum.Value.fromUnsignedBigInt(supplyInWei),
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b),
        ethereum.Value.fromUnsignedBigInt(curveScaler),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCostScaledParametric(
    amountInWei: BigInt,
    supplyInWei: BigInt,
    a: BigInt,
    b: BigInt,
    curveScaler: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCostScaledParametric",
      "calculateCostScaledParametric(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInWei),
        ethereum.Value.fromUnsignedBigInt(supplyInWei),
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b),
        ethereum.Value.fromUnsignedBigInt(curveScaler),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCostScaledParametricWithFees(
    amountInWei: BigInt,
    supplyInWei: BigInt,
    a: BigInt,
    b: BigInt,
    curveScaler: BigInt,
    creatorFeeBasisPoints: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateCostScaledParametricWithFees",
      "calculateCostScaledParametricWithFees(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInWei),
        ethereum.Value.fromUnsignedBigInt(supplyInWei),
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b),
        ethereum.Value.fromUnsignedBigInt(curveScaler),
        ethereum.Value.fromUnsignedBigInt(creatorFeeBasisPoints),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCostScaledParametricWithFees(
    amountInWei: BigInt,
    supplyInWei: BigInt,
    a: BigInt,
    b: BigInt,
    curveScaler: BigInt,
    creatorFeeBasisPoints: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCostScaledParametricWithFees",
      "calculateCostScaledParametricWithFees(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInWei),
        ethereum.Value.fromUnsignedBigInt(supplyInWei),
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b),
        ethereum.Value.fromUnsignedBigInt(curveScaler),
        ethereum.Value.fromUnsignedBigInt(creatorFeeBasisPoints),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCostWithFees(amountInToken: BigInt, _tokenId: BigInt): BigInt {
    let result = super.call(
      "calculateCostWithFees",
      "calculateCostWithFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInToken),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCostWithFees(
    amountInToken: BigInt,
    _tokenId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCostWithFees",
      "calculateCostWithFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInToken),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCostWithSupply(
    amountInToken: BigInt,
    _tokenId: BigInt,
    totalSupply: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateCostWithSupply",
      "calculateCostWithSupply(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInToken),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(totalSupply),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCostWithSupply(
    amountInToken: BigInt,
    _tokenId: BigInt,
    totalSupply: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCostWithSupply",
      "calculateCostWithSupply(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountInToken),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(totalSupply),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateReward(amount: BigInt, _tokenId: BigInt): BigInt {
    let result = super.call(
      "calculateReward",
      "calculateReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateReward(
    amount: BigInt,
    _tokenId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateReward",
      "calculateReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateRewardAndSupply(
    amount: BigInt,
    _tokenId: BigInt,
  ): ArenaTokenFactory__calculateRewardAndSupplyResult {
    let result = super.call(
      "calculateRewardAndSupply",
      "calculateRewardAndSupply(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return new ArenaTokenFactory__calculateRewardAndSupplyResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_calculateRewardAndSupply(
    amount: BigInt,
    _tokenId: BigInt,
  ): ethereum.CallResult<ArenaTokenFactory__calculateRewardAndSupplyResult> {
    let result = super.tryCall(
      "calculateRewardAndSupply",
      "calculateRewardAndSupply(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArenaTokenFactory__calculateRewardAndSupplyResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  calculateRewardWithFees(amount: BigInt, _tokenId: BigInt): BigInt {
    let result = super.call(
      "calculateRewardWithFees",
      "calculateRewardWithFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateRewardWithFees(
    amount: BigInt,
    _tokenId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRewardWithFees",
      "calculateRewardWithFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canDeployLp(): boolean {
    let result = super.call("canDeployLp", "canDeployLp():(bool)", []);

    return result[0].toBoolean();
  }

  try_canDeployLp(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canDeployLp", "canDeployLp():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getFeeData(
    _tokenId: BigInt,
    _rawCosts: BigInt,
    _user: Address,
  ): ArenaTokenFactory__getFeeDataResultFeeDataStruct {
    let result = super.call(
      "getFeeData",
      "getFeeData(uint256,uint256,address):((uint256,uint256,uint256,uint256,address,address))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_rawCosts),
        ethereum.Value.fromAddress(_user),
      ],
    );

    return changetype<ArenaTokenFactory__getFeeDataResultFeeDataStruct>(
      result[0].toTuple(),
    );
  }

  try_getFeeData(
    _tokenId: BigInt,
    _rawCosts: BigInt,
    _user: Address,
  ): ethereum.CallResult<ArenaTokenFactory__getFeeDataResultFeeDataStruct> {
    let result = super.tryCall(
      "getFeeData",
      "getFeeData(uint256,uint256,address):((uint256,uint256,uint256,uint256,address,address))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_rawCosts),
        ethereum.Value.fromAddress(_user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArenaTokenFactory__getFeeDataResultFeeDataStruct>(
        value[0].toTuple(),
      ),
    );
  }

  getMaxTokensForSale(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getMaxTokensForSale",
      "getMaxTokensForSale(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return result[0].toBigInt();
  }

  try_getMaxTokensForSale(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxTokensForSale",
      "getMaxTokensForSale(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenParameters(
    _tokenId: BigInt,
  ): ArenaTokenFactory__getTokenParametersResultParamsStruct {
    let result = super.call(
      "getTokenParameters",
      "getTokenParameters(uint256):((uint128,uint16,uint8,bool,uint8,uint8,uint8,address,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<ArenaTokenFactory__getTokenParametersResultParamsStruct>(
      result[0].toTuple(),
    );
  }

  try_getTokenParameters(
    _tokenId: BigInt,
  ): ethereum.CallResult<ArenaTokenFactory__getTokenParametersResultParamsStruct> {
    let result = super.tryCall(
      "getTokenParameters",
      "getTokenParameters(uint256):((uint128,uint16,uint8,bool,uint8,uint8,uint8,address,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArenaTokenFactory__getTokenParametersResultParamsStruct>(
        value[0].toTuple(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolFeeBasisPoint(): i32 {
    let result = super.call(
      "protocolFeeBasisPoint",
      "protocolFeeBasisPoint():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_protocolFeeBasisPoint(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "protocolFeeBasisPoint",
      "protocolFeeBasisPoint():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  protocolFeeDestination(): Address {
    let result = super.call(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_protocolFeeDestination(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  referralFeeBasisPoint(): i32 {
    let result = super.call(
      "referralFeeBasisPoint",
      "referralFeeBasisPoint():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_referralFeeBasisPoint(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "referralFeeBasisPoint",
      "referralFeeBasisPoint():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  referrers(param0: Address): Address {
    let result = super.call("referrers", "referrers(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_referrers(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("referrers", "referrers(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBalanceOf(param0: BigInt): BigInt {
    let result = super.call(
      "tokenBalanceOf",
      "tokenBalanceOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenBalanceOf(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalanceOf",
      "tokenBalanceOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenFactory(): Address {
    let result = super.call("tokenFactory", "tokenFactory():(address)", []);

    return result[0].toAddress();
  }

  try_tokenFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenFactory", "tokenFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenIdentifier(): BigInt {
    let result = super.call(
      "tokenIdentifier",
      "tokenIdentifier():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_tokenIdentifier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenIdentifier",
      "tokenIdentifier():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenParams(param0: BigInt): ArenaTokenFactory__tokenParamsResult {
    let result = super.call(
      "tokenParams",
      "tokenParams(uint256):(uint128,uint16,uint8,bool,uint8,uint8,uint8,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new ArenaTokenFactory__tokenParamsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBoolean(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toAddress(),
      result[8].toAddress(),
      result[9].toAddress(),
    );
  }

  try_tokenParams(
    param0: BigInt,
  ): ethereum.CallResult<ArenaTokenFactory__tokenParamsResult> {
    let result = super.tryCall(
      "tokenParams",
      "tokenParams(uint256):(uint128,uint16,uint8,bool,uint8,uint8,uint8,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArenaTokenFactory__tokenParamsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBoolean(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toAddress(),
        value[8].toAddress(),
        value[9].toAddress(),
      ),
    );
  }

  tokenSupply(param0: BigInt): BigInt {
    let result = super.call("tokenSupply", "tokenSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_tokenSupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenSupply",
      "tokenSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapV2Router02(): Address {
    let result = super.call(
      "uniswapV2Router02",
      "uniswapV2Router02():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_uniswapV2Router02(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Router02",
      "uniswapV2Router02():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyAndCreateLpIfPossibleCall extends ethereum.Call {
  get inputs(): BuyAndCreateLpIfPossibleCall__Inputs {
    return new BuyAndCreateLpIfPossibleCall__Inputs(this);
  }

  get outputs(): BuyAndCreateLpIfPossibleCall__Outputs {
    return new BuyAndCreateLpIfPossibleCall__Outputs(this);
  }
}

export class BuyAndCreateLpIfPossibleCall__Inputs {
  _call: BuyAndCreateLpIfPossibleCall;

  constructor(call: BuyAndCreateLpIfPossibleCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyAndCreateLpIfPossibleCall__Outputs {
  _call: BuyAndCreateLpIfPossibleCall;

  constructor(call: BuyAndCreateLpIfPossibleCall) {
    this._call = call;
  }
}

export class BuyWithReferrerAndCreateLpIfPossibleCall extends ethereum.Call {
  get inputs(): BuyWithReferrerAndCreateLpIfPossibleCall__Inputs {
    return new BuyWithReferrerAndCreateLpIfPossibleCall__Inputs(this);
  }

  get outputs(): BuyWithReferrerAndCreateLpIfPossibleCall__Outputs {
    return new BuyWithReferrerAndCreateLpIfPossibleCall__Outputs(this);
  }
}

export class BuyWithReferrerAndCreateLpIfPossibleCall__Inputs {
  _call: BuyWithReferrerAndCreateLpIfPossibleCall;

  constructor(call: BuyWithReferrerAndCreateLpIfPossibleCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BuyWithReferrerAndCreateLpIfPossibleCall__Outputs {
  _call: BuyWithReferrerAndCreateLpIfPossibleCall;

  constructor(call: BuyWithReferrerAndCreateLpIfPossibleCall) {
    this._call = call;
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get a(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get b(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get curveScaler(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get creatorFeeBasisPoints(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get tokenCreatorAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get tokenSplit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[6].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[7].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get uniswapV2RouterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ownerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenFactoryContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }
}

export class SellWithReferrerCall extends ethereum.Call {
  get inputs(): SellWithReferrerCall__Inputs {
    return new SellWithReferrerCall__Inputs(this);
  }

  get outputs(): SellWithReferrerCall__Outputs {
    return new SellWithReferrerCall__Outputs(this);
  }
}

export class SellWithReferrerCall__Inputs {
  _call: SellWithReferrerCall;

  constructor(call: SellWithReferrerCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SellWithReferrerCall__Outputs {
  _call: SellWithReferrerCall;

  constructor(call: SellWithReferrerCall) {
    this._call = call;
  }
}

export class SetAllowedTokenSupplyForParametersCall extends ethereum.Call {
  get inputs(): SetAllowedTokenSupplyForParametersCall__Inputs {
    return new SetAllowedTokenSupplyForParametersCall__Inputs(this);
  }

  get outputs(): SetAllowedTokenSupplyForParametersCall__Outputs {
    return new SetAllowedTokenSupplyForParametersCall__Outputs(this);
  }
}

export class SetAllowedTokenSupplyForParametersCall__Inputs {
  _call: SetAllowedTokenSupplyForParametersCall;

  constructor(call: SetAllowedTokenSupplyForParametersCall) {
    this._call = call;
  }

  get a(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get b(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get c(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get allowedtokenSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get tokenSplit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetAllowedTokenSupplyForParametersCall__Outputs {
  _call: SetAllowedTokenSupplyForParametersCall;

  constructor(call: SetAllowedTokenSupplyForParametersCall) {
    this._call = call;
  }
}

export class SetFeeDestinationCall extends ethereum.Call {
  get inputs(): SetFeeDestinationCall__Inputs {
    return new SetFeeDestinationCall__Inputs(this);
  }

  get outputs(): SetFeeDestinationCall__Outputs {
    return new SetFeeDestinationCall__Outputs(this);
  }
}

export class SetFeeDestinationCall__Inputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }

  get _feeDestination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeDestinationCall__Outputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }
}

export class SetLpDeployPermissionCall extends ethereum.Call {
  get inputs(): SetLpDeployPermissionCall__Inputs {
    return new SetLpDeployPermissionCall__Inputs(this);
  }

  get outputs(): SetLpDeployPermissionCall__Outputs {
    return new SetLpDeployPermissionCall__Outputs(this);
  }
}

export class SetLpDeployPermissionCall__Inputs {
  _call: SetLpDeployPermissionCall;

  constructor(call: SetLpDeployPermissionCall) {
    this._call = call;
  }

  get value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetLpDeployPermissionCall__Outputs {
  _call: SetLpDeployPermissionCall;

  constructor(call: SetLpDeployPermissionCall) {
    this._call = call;
  }
}

export class SetProtocolFeeBasisPointCall extends ethereum.Call {
  get inputs(): SetProtocolFeeBasisPointCall__Inputs {
    return new SetProtocolFeeBasisPointCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeBasisPointCall__Outputs {
    return new SetProtocolFeeBasisPointCall__Outputs(this);
  }
}

export class SetProtocolFeeBasisPointCall__Inputs {
  _call: SetProtocolFeeBasisPointCall;

  constructor(call: SetProtocolFeeBasisPointCall) {
    this._call = call;
  }

  get _feeBasisPoint(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetProtocolFeeBasisPointCall__Outputs {
  _call: SetProtocolFeeBasisPointCall;

  constructor(call: SetProtocolFeeBasisPointCall) {
    this._call = call;
  }
}

export class SetReferralFeeBasisPointCall extends ethereum.Call {
  get inputs(): SetReferralFeeBasisPointCall__Inputs {
    return new SetReferralFeeBasisPointCall__Inputs(this);
  }

  get outputs(): SetReferralFeeBasisPointCall__Outputs {
    return new SetReferralFeeBasisPointCall__Outputs(this);
  }
}

export class SetReferralFeeBasisPointCall__Inputs {
  _call: SetReferralFeeBasisPointCall;

  constructor(call: SetReferralFeeBasisPointCall) {
    this._call = call;
  }

  get _feeBasisPoint(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetReferralFeeBasisPointCall__Outputs {
  _call: SetReferralFeeBasisPointCall;

  constructor(call: SetReferralFeeBasisPointCall) {
    this._call = call;
  }
}

export class SetRouter02Call extends ethereum.Call {
  get inputs(): SetRouter02Call__Inputs {
    return new SetRouter02Call__Inputs(this);
  }

  get outputs(): SetRouter02Call__Outputs {
    return new SetRouter02Call__Outputs(this);
  }
}

export class SetRouter02Call__Inputs {
  _call: SetRouter02Call;

  constructor(call: SetRouter02Call) {
    this._call = call;
  }

  get _newRouter02(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouter02Call__Outputs {
  _call: SetRouter02Call;

  constructor(call: SetRouter02Call) {
    this._call = call;
  }
}

export class SetTokenFactoryCall extends ethereum.Call {
  get inputs(): SetTokenFactoryCall__Inputs {
    return new SetTokenFactoryCall__Inputs(this);
  }

  get outputs(): SetTokenFactoryCall__Outputs {
    return new SetTokenFactoryCall__Outputs(this);
  }
}

export class SetTokenFactoryCall__Inputs {
  _call: SetTokenFactoryCall;

  constructor(call: SetTokenFactoryCall) {
    this._call = call;
  }

  get _newTokenFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenFactoryCall__Outputs {
  _call: SetTokenFactoryCall;

  constructor(call: SetTokenFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
