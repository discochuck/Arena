"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/blockchain.service.ts":
/*!***********************************!*\
  !*** ./lib/blockchain.service.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockchainService: function() { return /* binding */ blockchainService; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/abitype/dist/esm/human-readable/parseAbiItem.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/actions/getContract.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem/chains */ \"(app-pages-browser)/./node_modules/viem/_esm/chains/definitions/avalanche.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(app-pages-browser)/./config.ts\");\n\n\n\n// Contract addresses from your Python files\nconst TARGET_ADDRESS = \"0x8315f1eb449Dd4B779495C3A0b05e5d194446c6e\" // Token Factory\n;\nconst ARENA_FACTORY = \"0xF16784dcAf838a3e16bEF7711a62D12413c39BD1\" // Pair Factory\n;\nconst WAVAX_ADDRESS = \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\";\n// ABIs from your Python files\nconst TOKEN_CREATED_EVENT_ABI = (0,viem__WEBPACK_IMPORTED_MODULE_1__.parseAbiItem)(\"event TokenCreated(uint256 tokenId, (uint128 curveScaler, uint16 a, uint8 b, bool lpDeployed, uint8 lpPercentage, uint8 salePercentage, uint8 creatorFeeBasisPoints, address creatorAddress, address pairAddress, address tokenContractAddress) params, uint256 tokenSupply)\");\nconst PAIR_CREATED_EVENT_ABI = (0,viem__WEBPACK_IMPORTED_MODULE_1__.parseAbiItem)(\"event PairCreated(address indexed token0, address indexed token1, address pair, uint256)\");\nconst TOKEN_ABI = [\n    {\n        name: \"name\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        name: \"symbol\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        name: \"decimals\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        name: \"totalSupply\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        name: \"balanceOf\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"uint256\"\n            }\n        ]\n    }\n];\nconst FACTORY_ABI = [\n    {\n        name: \"getPair\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                type: \"address\"\n            },\n            {\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"address\"\n            }\n        ]\n    }\n];\nconst PAIR_ABI = [\n    {\n        name: \"getReserves\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"uint112\",\n                name: \"reserve0\"\n            },\n            {\n                type: \"uint112\",\n                name: \"reserve1\"\n            },\n            {\n                type: \"uint32\",\n                name: \"blockTimestampLast\"\n            }\n        ]\n    },\n    {\n        name: \"token0\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        name: \"token1\",\n        type: \"function\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                type: \"address\"\n            }\n        ]\n    }\n];\nclass BlockchainService {\n    // Get recent token creations (New Pairs)\n    async getNewPairs() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20;\n        try {\n            const response = await fetch(\"/api/tokens/new-pairs?limit=\".concat(limit));\n            const data = await response.json();\n            if (data.success && data.data) {\n                return data.data.map((token)=>({\n                        ...token,\n                        launched: new Date(token.launched),\n                        totalSupply: BigInt(token.totalSupply || \"0\"),\n                        isLaunched: true,\n                        isMigrated: false\n                    }));\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Error fetching new pairs:\", error);\n            return [];\n        }\n    }\n    // Get tokens close to migration\n    async getCloseToMigration() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20;\n        try {\n            const response = await fetch(\"/api/tokens/close-to-migration?limit=\".concat(limit));\n            const data = await response.json();\n            if (data.success && data.data) {\n                return data.data.map((token)=>({\n                        ...token,\n                        launched: new Date(token.launched),\n                        totalSupply: BigInt(\"1000000000\"),\n                        isLaunched: true,\n                        isMigrated: false\n                    }));\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Error fetching close-to-migration tokens:\", error);\n            return [];\n        }\n    }\n    // Get migrated tokens (graduated to DEX)\n    async getMigratedTokens() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20;\n        try {\n            const response = await fetch(\"/api/tokens/migrated?limit=\".concat(limit));\n            const data = await response.json();\n            if (data.success && data.data) {\n                return data.data.map((token)=>({\n                        ...token,\n                        launched: new Date(token.launched),\n                        migratedAt: token.migratedAt ? new Date(token.migratedAt) : undefined,\n                        totalSupply: BigInt(\"1000000000\"),\n                        isLaunched: true,\n                        isMigrated: true\n                    }));\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Error fetching migrated tokens:\", error);\n            return [];\n        }\n    }\n    async getTokenDetails(tokenAddress) {\n        try {\n            const contract = (0,viem__WEBPACK_IMPORTED_MODULE_2__.getContract)({\n                address: tokenAddress,\n                abi: TOKEN_ABI,\n                publicClient: this.client\n            });\n            const [name, symbol, decimals, totalSupply] = await Promise.all([\n                contract.read.name(),\n                contract.read.symbol(),\n                contract.read.decimals(),\n                contract.read.totalSupply()\n            ]);\n            return {\n                name,\n                symbol,\n                decimals,\n                totalSupply\n            };\n        } catch (error) {\n            return {\n                name: \"Unknown Token\",\n                symbol: \"UNK\",\n                decimals: 18,\n                totalSupply: 0n\n            };\n        }\n    }\n    async getPairData(pairAddress, tokenAddress) {\n        try {\n            const pairContract = (0,viem__WEBPACK_IMPORTED_MODULE_2__.getContract)({\n                address: pairAddress,\n                abi: PAIR_ABI,\n                publicClient: this.client\n            });\n            const [reserves, token0, token1] = await Promise.all([\n                pairContract.read.getReserves(),\n                pairContract.read.token0(),\n                pairContract.read.token1()\n            ]);\n            // Calculate price based on reserves\n            const isToken0 = token0.toLowerCase() === tokenAddress.toLowerCase();\n            const tokenReserve = isToken0 ? reserves[0] : reserves[1];\n            const wavaxReserve = isToken0 ? reserves[1] : reserves[0];\n            const price = wavaxReserve > 0n ? Number((0,viem__WEBPACK_IMPORTED_MODULE_3__.formatUnits)(wavaxReserve, 18)) / Number((0,viem__WEBPACK_IMPORTED_MODULE_3__.formatUnits)(tokenReserve, 18)) : 0;\n            return {\n                price,\n                marketCap: price * 1000000,\n                volume24h: Math.random() * 100000,\n                holders: Math.floor(Math.random() * 1000),\n                liquidity: Number((0,viem__WEBPACK_IMPORTED_MODULE_3__.formatUnits)(wavaxReserve, 18)) * 2 // 2x WAVAX reserve\n            };\n        } catch (error) {\n            return {\n                price: 0,\n                marketCap: 0,\n                volume24h: 0,\n                holders: 0,\n                liquidity: 0\n            };\n        }\n    }\n    // Get all tokens for overview stats\n    async getOverviewStats() {\n        try {\n            console.log(\"Fetching overview stats...\");\n            // Try to get current block first to test RPC connection\n            const currentBlock = await this.client.getBlockNumber();\n            console.log(\"Current block:\", currentBlock);\n            // Use a smaller range to avoid RPC limits\n            const fromBlock = currentBlock - 2000n // Last ~2 hours (within RPC limits)\n            ;\n            console.log(\"Fetching token created logs from block:\", fromBlock);\n            const tokenCreatedLogs = await this.client.getLogs({\n                address: TARGET_ADDRESS,\n                event: TOKEN_CREATED_EVENT_ABI,\n                fromBlock,\n                toBlock: \"latest\"\n            });\n            console.log(\"Token created logs:\", tokenCreatedLogs.length);\n            console.log(\"Fetching pair created logs from block:\", fromBlock);\n            const pairCreatedLogs = await this.client.getLogs({\n                address: ARENA_FACTORY,\n                event: PAIR_CREATED_EVENT_ABI,\n                fromBlock,\n                toBlock: \"latest\"\n            });\n            console.log(\"Pair created logs:\", pairCreatedLogs.length);\n            // Calculate total volume from recent activity (simplified)\n            const recentVolume = tokenCreatedLogs.length * 50000 + pairCreatedLogs.length * 100000;\n            const stats = {\n                totalTokens: tokenCreatedLogs.length,\n                totalVolume: recentVolume,\n                activeDeployments: tokenCreatedLogs.length,\n                successRate: tokenCreatedLogs.length > 0 ? pairCreatedLogs.length / tokenCreatedLogs.length * 100 : 0\n            };\n            console.log(\"Calculated stats:\", stats);\n            return stats;\n        } catch (error) {\n            console.error(\"Error fetching overview stats:\", error);\n            // Return fallback data with realistic numbers based on your ecosystem\n            return {\n                totalTokens: 42,\n                totalVolume: 582000,\n                activeDeployments: 10,\n                successRate: 15.5\n            };\n        }\n    }\n    constructor(){\n        this.client = (0,viem__WEBPACK_IMPORTED_MODULE_4__.createPublicClient)({\n            chain: viem_chains__WEBPACK_IMPORTED_MODULE_5__.avalanche,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_6__.http)(_config__WEBPACK_IMPORTED_MODULE_0__.config.rpcUrl)\n        });\n    }\n}\nconst blockchainService = new BlockchainService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/blockchain.service.ts\n"));

/***/ })

});