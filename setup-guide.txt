BALLISTIC TERMINAL LAUNCHER - SETUP GUIDE
=========================================

QUICK START GUIDE
-----------------

Prerequisites:
- Node.js 18 or higher
- npm (comes with Node.js)
- Git
- Avalanche RPC URL (optional but recommended)

Step 1: Download/Clone the Project
----------------------------------
Option A: Download ZIP
- Download the project as ZIP from GitHub
- Extract to your desired folder

Option B: Git Clone
git clone https://github.com/yourusername/Arena.git
cd Arena

Step 2: Install Dependencies
----------------------------
cd frontend
npm install

Step 3: Environment Setup
--------------------------
Create a file named .env.local in the frontend folder with:

NEXT_PUBLIC_RPC_URL=https://api.avax.network/ext/bc/C/rpc

Optional: Use your own RPC for better performance:
NEXT_PUBLIC_RPC_URL=https://avalanche-mainnet.infura.io/v3/YOUR_PROJECT_ID

Step 4: Start Development Server
---------------------------------
npm run dev

Step 5: Open Browser
--------------------
Navigate to: http://localhost:3000

DETAILED CONFIGURATION
-----------------------

Environment Variables:
- NEXT_PUBLIC_RPC_URL: Avalanche RPC endpoint (required for live data)

Contract Addresses (pre-configured):
- Arena Launcher: 0x8315f1eb449Dd4B779495C3A0b05e5d194446c6e
- Factory: 0xF16784dcAf838a3e16bEF7711a62D12413c39BD1
- WAVAX: 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7
- Router: 0xF56D524D651B90E4B84dc2FffD83079698b9066E

DEVELOPMENT COMMANDS
--------------------
npm run dev          # Start development server
npm run build        # Build for production
npm run start        # Start production server
npm run lint         # Run ESLint
npm run type-check   # TypeScript type checking

PROJECT STRUCTURE
------------------
Arena/
â”œâ”€â”€ frontend/                    # Main Next.js application
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ components/         # React components
â”‚   â”‚   â”‚   â”œâ”€â”€ Navigation.tsx  # Header navigation
â”‚   â”‚   â”‚   â”œâ”€â”€ TokenTable.tsx  # Token launches table
â”‚   â”‚   â”‚   â”œâ”€â”€ TopPerformers.tsx # Top tokens ranking
â”‚   â”‚   â”‚   â”œâ”€â”€ TokenChart.tsx  # Volume/deployment chart
â”‚   â”‚   â”‚   â”œâ”€â”€ RecentActivity.tsx # Activity feed
â”‚   â”‚   â”‚   â””â”€â”€ StatsCard.tsx   # Dashboard stats
â”‚   â”‚   â”œâ”€â”€ api/               # API routes
â”‚   â”‚   â”‚   â””â”€â”€ explore/       # Token exploration endpoints
â”‚   â”‚   â”œâ”€â”€ explore/           # Token exploration page
â”‚   â”‚   â”œâ”€â”€ globals.css        # Global styles
â”‚   â”‚   â”œâ”€â”€ layout.tsx         # Root layout
â”‚   â”‚   â””â”€â”€ page.tsx           # Main dashboard
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â””â”€â”€ blockchain.ts      # Blockchain service layer
â”‚   â”œâ”€â”€ public/                # Static assets
â”‚   â”œâ”€â”€ package.json           # Dependencies
â”‚   â”œâ”€â”€ next.config.js         # Next.js configuration
â”‚   â”œâ”€â”€ tailwind.config.js     # Tailwind CSS config
â”‚   â””â”€â”€ tsconfig.json          # TypeScript config
â”œâ”€â”€ README.md                   # Project documentation
â”œâ”€â”€ LICENSE                     # MIT License
â””â”€â”€ CONTRIBUTING.md             # Contribution guidelines

FEATURES OVERVIEW
-----------------

Dashboard Components:
1. Stats Cards - Total tokens, volume, deployments, success rate
2. Volume & Deployments Chart - 24-hour blockchain data
3. Top Performers - Arena ecosystem tokens by market cap
4. Token Table - Recent launches with Arena Social links
5. Recent Activity - Live feed of launches and migrations

Key Integrations:
- Arena Launcher Contract: Live token monitoring
- DexScreener API: Real token data and images
- Arena Social: Community page links
- Avalanche Network: Optimized for 2-second blocks

CUSTOMIZATION
-------------

To modify contract addresses:
Edit frontend/lib/blockchain.ts:
- LAUNCHER_CONTRACT_ADDRESS
- FACTORY_CONTRACT_ADDRESS
- WAVAX_CONTRACT_ADDRESS

To change styling:
Edit Tailwind classes in component files
Modify frontend/app/globals.css for global styles

To add new features:
1. Create new component in frontend/app/components/
2. Add to main dashboard in frontend/app/page.tsx
3. Update blockchain.ts for data fetching

TROUBLESHOOTING
---------------

Common Issues:

1. "Module not found" errors:
   - Run: npm install
   - Delete node_modules and run: npm install

2. "RPC URL not configured":
   - Check .env.local file exists
   - Verify NEXT_PUBLIC_RPC_URL is set

3. Slow loading:
   - Use a faster RPC provider
   - Check network connection

4. TypeScript errors:
   - Run: npm run type-check
   - Update types as needed

5. Build errors:
   - Run: npm run lint
   - Fix any linting issues

DEPLOYMENT
----------

Vercel (Recommended):
1. Install Vercel CLI: npm install -g vercel
2. Run: vercel --prod
3. Set environment variables in Vercel dashboard

Netlify:
1. Connect GitHub repository
2. Set build command: npm run build
3. Set publish directory: frontend/.next
4. Add environment variables

Docker:
1. Create Dockerfile in frontend/
2. Build: docker build -t ballistic-terminal .
3. Run: docker run -p 3000:3000 ballistic-terminal

PERFORMANCE TIPS
-----------------

1. Use a dedicated RPC provider (Infura, Alchemy)
2. The app includes built-in optimizations:
   - Parallel API calls
   - Token metadata caching
   - Optimized block ranges
   - Smart fallback systems

3. For production:
   - Enable environment variable validation
   - Set up monitoring
   - Configure proper caching headers

SUPPORT
-------

For help:
1. Check GitHub Issues
2. Read the full README.md
3. Join community discussions
4. Create new issue if needed

The project is designed to be beginner-friendly while providing
advanced features for experienced developers.

Happy coding! ðŸš€ 